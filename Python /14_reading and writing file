# Reading and Writing Files üìù

- process of reading and writing to a file is like finding a book and opening a book.üìö
- First, the file is located, opened to the first page, then reading/writing begins until it reaches
the end of the file. üîÑ


## open()

- open() returns a file object, and is most commonly used with two arguments:
  
```python
open(filename, mode)
```
mode is describing the way in which the file will be used. mode can be:

    - 'r' when the file will only be read,
    - 'w' for only writing (an existing file with the same name will be erased),
    - 'a' opens the file for appending; any data written to the file is automatically added to end.
    - 'r+' opens the file for both reading and writing.
    - 'b' appended to the mode opens the file in binary mode: now the data is read and written in the form of bytes objects. This mode should be used for all files that don‚Äôt contain text.

The mode argument is optional; 'r' will be assumed if it‚Äôs omitted.


- Normally, files are opened in text mode, that means, you read and write strings from and to the
file, which are encoded in a specific encoding. 
- If encoding is not specified, the default is platform dependent (see open()). 

## open files without using `with` statement 

```python    
    
    # Open files without using 'with' statement.
    file = open('src/files/multi_line_file.txt', 'r')

    assert not file.closed

    read_data = file.read()

    assert read_data == (
        'first line\n'
        'second line\n'
        'third line'
    )

    file.close()

    assert file.closed
```
## Open file using with.
```python

    # Open file using with.
    with open('src/files/multi_line_file.txt', 'r') as file:
        read_data = file.read()

        assert read_data == (
            'first line\n'
            'second line\n'
            'third line'
        )

    assert file.closed
```
- If you‚Äôre not using the with keyword, then you should call f.close() to close the file and
- immediately free up any system resources used by it. If you don‚Äôt explicitly close a file,
- Python‚Äôs garbage collector will eventually destroy the object and close the open file for you,
- but the file may stay open for a while. Another risk is that different Python implementations
- will do this clean-up at different times.
